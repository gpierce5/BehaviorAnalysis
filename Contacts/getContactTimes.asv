
function getContactTimes(fpath,nfile,plotFig)
%getContactTimes Reads ntrode trace of contact signal and calculates times
%   and indices of contact onsets. Requires various manually selected
%   thresholds.
% Inputs:
%   - fpath: file path string with '\' at end
%   - nfile: ntrode filename
%   - plotFig: 'y' or 'n', currently unused flag to block or allow figure
%   plotting
%
%   Adapted from Amanda's getContactTimes_wholetrace_timesOnly.m


%Read in ntrode files for top and bottom contacts
samplingRate = 16000;
dt = 1000/samplingRate;

%Read in contact data files
contacts = readNtrode(fpath,nfile,{'top_contact','bot_contact','trial_start'});

contactTop = contacts.top_contact;
contactBottom = contacts.bot_contact;

totalTime = length(contactTop)*dt;

%Get trial start times, will need them if cutting out data
trialStartSig = contacts.trial_start;
trialStartTimes = getEventTimes(trialStartSig, samplingRate,'negative');
%xvect=0:dt:(length(contactBottom)-1)*dt;

j = figure;
h = figure;

figure(j)
hold on
plot(dt:dt:length(contactTop)*dt,contactTop,'r')
axis tight
title('top contact signal')
xlabel('time (ms)')


figure(h)
hold on
plot(dt:dt:length(contactBottom)*dt,contactBottom,'r')
axis tight
title('bottom contact signal')
xlabel('time (ms)')

%Select a range of data to plot (if file is too long plotting gets really
%sluggish; a good range is ~ 2e5 total msec of data)
% startPlotTop = input('What time point to begin top signal plot? ');
% startPlotTop = startPlotTop/dt;
% endPlotTop = input('What time point to end top signal plot? ');
% endPlotTop = endPlotTop/dt;
%
% startPlotBottom = input('What time point to begin bottom signal plot? ');
% startPlotBottom = startPlotBottom/dt;
% endPlotBottom = input('What time point to end bottom signal plot? ');
% endPlotBottom = endPlotBottom/dt;

%Select a range of data to plot by choosing a set of trials
firstTrialTop = input('What trial to begin top signal plot? ');
startPlotTop = trialStartTimes(firstTrialTop);
startPlotTop = startPlotTop/dt;
stopTrialTop = input('What trial to end top signal plot? ');
endPlotTop = trialStartTimes(stopTrialTop);
endPlotTop = endPlotTop/dt;

firstTrialBottom = input('What trial to begin bottom signal plot? ');
startPlotBottom = trialStartTimes(firstTrialBottom);
startPlotBottom = startPlotBottom/dt;
stopTrialBottom =  input('What trial to end bottom signal plot? ');
endPlotBottom = trialStartTimes(stopTrialBottom);
endPlotBottom = endPlotBottom/dt;



%Replot to show only the selected range of data
figure(j)
hold off
plot(dt:dt:length(contactTop(startPlotTop:endPlotTop))*dt,contactTop(startPlotTop:endPlotTop),'r')
hold on
axis tight
title(['top contact signal, trials ' num2str(firstTrialTop) ' to ' num2str(stopTrialTop)])
xlabel('time (ms)')

figure(h)
hold off
plot(dt:dt:length(contactBottom(startPlotBottom:endPlotBottom))*dt,contactBottom(startPlotBottom:endPlotBottom),'r')
hold on
axis tight
title(['bottom contact signal, trials ' num2str(firstTrialBottom) ' to ' num2str(stopTrialBottom)])
xlabel('time (ms)')

%Indicate if poles are moving, if so will want to filter data and cut out
%motor noise
polesMoving = 'y';%input('Are poles moving ("y" = yes, "n" = no)? ');
startSig = 'n';%input('Is the IR start LED showing up in contact signal ("y" = yes, "n" = no)? ');

if isequal(polesMoving,'y')
    %%Band-pass filtering data to get rid of high-frequency electrical
    %%noise and low frequency baseline shifts
    cutoffFreq = [20 3000];
    cfreq = cutoffFreq/samplingRate;
    [b,a] = butter(1,[cfreq],'bandpass');
    contactTop = filtfilt(b,a,contactTop);
    contactBottom = filtfilt(b,a,contactBottom);
    
    %Add filtered data to plot
    figure(j)
    plot(dt:dt:length(contactTop(startPlotTop:endPlotTop))*dt,contactTop(startPlotTop:endPlotTop),'b')
    figure(h)
    plot(dt:dt:length(contactBottom(startPlotBottom:endPlotBottom))*dt,contactBottom(startPlotBottom:endPlotBottom),'b')
    
    stimDur = 1500;%input('What is the duration of the stim period? ');
    
    %Cut out motor artifact around trial start times
    motorCutTop = [170, 100];
    preMotorTop = 100;
    motorCutBottom = [170, 110];
    preMotorBottom = 100;
    contactTop = cutoutNoise(contactTop,trialStartTimes,dt,motorCutTop(1)); %cut out around motor moving into position (at trial start times)
    contactTop = cutoutNoise(contactTop,trialStartTimes+stimDur-preMotorTop,dt,motorCutTop(2)); %cut out around motor moving out of position (at end of stim dur)
    contactBottom = cutoutNoise(contactBottom,trialStartTimes,dt,motorCutBottom(1));
    contactBottom = cutoutNoise(contactBottom,trialStartTimes+stimDur-preMotorBottom,dt,motorCutBottom(2));
    %consider adding something to check the cutoffs
    
    
    %Plot new contact signal with motor artifact removed
    figure(j)
    plot(dt:dt:length(contactTop(startPlotTop:endPlotTop))*dt,contactTop(startPlotTop:endPlotTop),'g')
    disp('press any key to continue, this is your last chance to zoom in/out before thresholding')
    pause %if go straight to input, matlab won't let you zoom in the figure
    threshTop = input('What threshold value to use for top contacts? '); %0.2;
    line([0 length(contactTop(startPlotTop:endPlotTop))*dt],[threshTop threshTop],'LineStyle','--','Color','m')
    
    figure(h)
    plot(dt:dt:length(contactBottom(startPlotBottom:endPlotBottom))*dt,contactBottom(startPlotBottom:endPlotBottom),'g')
    disp('press any key to continue, this is your last chance to zoom in/out before thresholding')
    pause
    threshBottom = input('What threshold value to use for bottom contacts? '); %0.2;
    line([0 length(contactBottom(startPlotBottom:endPlotBottom))*dt],[threshBottom threshBottom],'LineStyle','--','Color','m')
    
end

%Get contact times; this will pull out each little peak in the signal and
%call it a contact time. You can set a refractory period, set by 'refract'
%variable
refract = 5; %25; %in ms

contactTopInd = calcContactTimes_c(contactTop,threshTop,refract,dt);
contactTopTimes = round(contactTopInd*dt);
disp(['Found ',num2str(length(contactTopTimes)),' top contacts'])

contactBottomInd = calcContactTimes_c(contactBottom,threshBottom,refract,dt);
contactBottomTimes = round(contactBottomInd*dt);
disp(['Found ',num2str(length(contactBottomTimes)),' bottom contacts'])

%just get contacts within range of what's being plotted
% figure(j)
% contactsPlotTop = contactTopInd(contactTopInd > startPlotTop & contactTopInd < endPlotTop);
% contactsPlotTop = contactsPlotTop - startPlotTop;
% plot(contactsPlotTop*dt,contactTop(startPlotTop+contactsPlotTop),'ko')
%
% figure(h)
% contactsPlotBottom = contactBottomInd(contactBottomInd > startPlotBottom & contactBottomInd < endPlotBottom);
% contactsPlotBottom = contactsPlotBottom - startPlotBottom;
% plot(contactsPlotBottom*dt,contactBottom(startPlotBottom+contactsPlotBottom),'ko')

%Find mean of filtered ITI
ITIstarts = trialStartTimes(1:end-1)+stimDur+50;
ITIends = trialStartTimes(2:end)-10;
baselineTop = mean(contactTop(ITIstarts:ITIends));
baselineBottom = mean(contactBottom(ITIstarts:ITIends));
%plot the baseline
figure(j)
line([0 length(contactTop(startPlotTop:endPlotTop))*dt],[baselineTop baselineTop],'LineStyle','--','Color','k')

figure(h)
line([0 length(contactBottom(startPlotBottom:endPlotBottom))*dt],[baselineBottom baselineBottom],'LineStyle','--','Color','k')

%Call it a new contact if the signal returns to baseline
tempContacts = contactTopInd;
c=1;
while c < length(tempContacts)
    tempSig = contactTop(tempContacts(c):tempContacts(c+1));
    crossing = tempSig<=baselineTop; %does the signal between contacts cross the threshold? May need to lower baseline threshold
    if sum(crossing)<1 %if not, delete this point for deletion
        tempContacts(c+1)=[];
    else
        c=c+1;
    end
    if length(tempContacts)==1 %deleted all the contacts except the first, which you never check
        break
    end
end
%plot the ones we kept
figure(j)
contactsPlotTop = tempContacts(tempContacts > startPlotTop & tempContacts < endPlotTop);
contactsPlotTop = contactsPlotTop - startPlotTop;
plot(contactsPlotTop*dt,contactTop(startPlotTop+contactsPlotTop),'kp')
disp('Look around at the contacts, press any key to continue')
pause
%accept or reject deletions
keepTopContacts = input('Do you like these contacts? (1 or 0) ');
if keepTopContacts == 1
    contactTopInd = tempContacts;
end

tempContacts = contactBottomInd;
c=1;
while c < length(tempContacts)
    tempSig = contactBottom(tempContacts(c):tempContacts(c+1));
    crossing = tempSig<=(baselineBottom); %does the signal between contacts cross the threshold?
    if sum(crossing)<1 %if not, delete this point for deletion
        tempContacts(c+1)=[];
    else
        c=c+1;
    end
    if length(tempContacts)==1 %deleted all the contacts except the first, which you never check
        break
    end
    %     disp(num2str(length(tempContacts)))
    %     disp(num2str(c))
end
%plot the ones we kept
figure(h)
contactsPlotBottom = tempContacts(tempContacts > startPlotBottom & tempContacts < endPlotBottom);
contactsPlotBottom = contactsPlotBottom - startPlotBottom;
plot(contactsPlotBottom*dt,contactBottom(startPlotBottom+contactsPlotBottom),'ko')
disp('Look around at the contacts, press any key to continue')
pause
%accept or reject deletions
keepBottomContacts = input('Do you like these contacts? (1 or 0) ');
if keepBottomContacts == 1
    contactBottomInd = tempContacts;
end



%check another set of trials
%Select a range of data to plot by choosing a set of trials
disp('Check another set of trials')
firstTrialTop = input('What trial to begin top signal plot? ');
startPlotTop = trialStartTimes(firstTrialTop);
startPlotTop = startPlotTop/dt;
stopTrialTop = input('What trial to end top signal plot? ');
endPlotTop = trialStartTimes(stopTrialTop);
endPlotTop = endPlotTop/dt;

firstTrialBottom = input('What trial to begin bottom signal plot? ');
startPlotBottom = trialStartTimes(firstTrialBottom);
startPlotBottom = startPlotBottom/dt;
stopTrialBottom =  input('What trial to end bottom signal plot? ');
endPlotBottom = trialStartTimes(stopTrialBottom);
endPlotBottom = endPlotBottom/dt;
%plot the filtered/cut contact signal
figure(j)
hold off
plot(dt:dt:length(contacts.top_contact(startPlotTop:endPlotTop))*dt,contacts.top_contact(startPlotTop:endPlotTop),'r')
hold on
plot(dt:dt:length(contactTop(startPlotTop:endPlotTop))*dt,contactTop(startPlotTop:endPlotTop),'b')
title(['top contacts, trials ' num2str(firstTrialTop) ' to ' num2str(stopTrialBottom)])
xlabel('ms')

figure(h)
hold off
plot(dt:dt:length(contacts.bot_contact(startPlotBottom:endPlotBottom))*dt,contacts.bot_contact(startPlotBottom:endPlotBottom),'r')
hold on
plot(dt:dt:length(contactBottom(startPlotBottom:endPlotBottom))*dt,contactBottom(startPlotBottom:endPlotBottom),'b')
title(['bottom contacts, trials ' num2str(firstTrialBottom) ' to ' num2str(stopTrialBottom)])
xlabel('ms')

%plot the detected contacts
figure(j)
contactsPlotTop = contactTopInd(contactTopInd > startPlotTop & contactTopInd < endPlotTop);
contactsPlotTop = contactsPlotTop - startPlotTop;
plot(contactsPlotTop*dt,contactTop(startPlotTop+contactsPlotTop),'mp')
figure(h)
contactsPlotBottom = contactBottomInd(contactBottomInd > startPlotBottom & contactBottomInd < endPlotBottom);
contactsPlotBottom = contactsPlotBottom - startPlotBottom;
plot(contactsPlotBottom*dt,contactBottom(startPlotBottom+contactsPlotBottom),'mp')

contactTopTimes = round(contactTopInd*dt);
contactBottomTimes = round(contactBottomInd*dt);

%Save contacts times, saved as a list of times
disp('Saving .mat file...')
if exist([nfile '-contactData.mat'],'file')
    save([nfile '-contactData.mat'],'contactBottomTimes','contactTopTimes','contactTopInd','trialStartTimes','-append')
else
    save([nfile '-contactData.mat'],'contactBottomTimes','contactTopTimes','contactBottomInd','trialStartTimes')
end

end
